def latestSuccess = env.LATEST_SUCCESS
def numOfCommits

node {
  // If there is a latest success build
  if(latestSuccess != "NULL") {
    numOfCommits = countCommits() + env.NUM_OF_COMMITS
  }
  if(latestSuccess == "NULL" || numOfCommits <= 8) {
    try {
      stage("Build") {
        sh "echo ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT}"
        sh 'mvn clean'
      }
      stage("Test") {
        sh 'mvn test'
      }
      stage("Package") {
        sh 'mvn package'
      }
      stage("Deploy") {
        slackSend channel: 'builds', message: "Build Sucessful ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
      }
      if(currentBuild.currentResult == "SUCCESS") {
        env.LATEST_SUCCESS = currentBuild.id
        env.NUM_OF_COMMITS = 0
      }
    } catch(ex) {
      execBisect()
    }
  }
}

def countCommits() {
  def changeLogs = currentBuild.changeSets
  def commits = 0
  for(int i = 0; i < changeLogs.size(); i++) {
    def entries = changeLogs[i].items
    //Count the commits
    for(int j = 0; j < entries.length; j++) {
      commits++
    }
  }
  return commits
}

def execBisect() {
  def previousCommit = env.GIT_PREVIOUS_COMMIT //Get last commint of the new commits # >= 8
  def previousSuccessfulCommit = env.GIT_PREVIOUS_SUCCESSFUL_COMMIT // Get last commit that was successful

  sh "git bisect start ${previousCommit} ${previousSuccessfulCommit}"
  sh "git bisect run mvn clean test"
  sh "git bisect reset"
}
